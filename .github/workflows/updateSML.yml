name: Check and update SatisfactoryModLoader

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The game branch (EarlyAccess/Experimental)'
        required: true
        type: string
  workflow_call:
    inputs:
      branch:
        description: 'The game branch (EarlyAccess/Experimental)'
        required: true
        type: string
    secrets:
      WWISE_EMAIL:
        required: true
      WWISE_PASSWORD:
        required: true
      ACCESS_TOKEN:
        required: false

jobs:
  check:
    runs-on: [self-hosted, project-updater]
    outputs:
     shouldRun: ${{ steps.setShouldRun.outputs.shouldRun }}
     gameVersion: ${{ steps.setGameVersion.outputs.gameVersion }}
    steps:
      - name: Validate branch name
        if: inputs.branch != 'EarlyAccess' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Download Satisfactory EarlyAccess version file
        if: inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --no-https --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental version file
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --no-https --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y

      - name: Read Satisfactory version
        id: gameVersion
        uses: notiz-dev/github-action-json-property@release
        with: 
            path: 'Satisfactory/Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version'
            prop_path: 'Changelist'

      - uses: actions/checkout@v3
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'sfm'
          repository: 'satisfactorymodding/UnrealProjectGenerator'
      
      - name: Checkout SML
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/auto-header-update'
          path: 'SML'
          repository: 'satisfactorymodding/SatisfactoryModLoader'

      - name: Read current headers version
        id: currentHeadersVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'sfm/Headers/currentVersion.txt'

      - name: Read current headers version
        id: currentSMLHeadersVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'SML/Source/FactoryGame/currentVersion.txt'
          trim: true
      
      - name: Set gameVersion
        id: setGameVersion
        run: echo "gameVersion=${{ steps.gameVersion.outputs.prop }}" >> $Env:GITHUB_OUTPUT
      
      - name: Set shouldRun
        id: setShouldRun
        run: echo "shouldRun=${{ steps.gameVersion.outputs.prop > steps.currentSMLHeadersVersion.outputs.content && steps.gameVersion.outputs.prop == steps.currentHeadersVersion.outputs.content }}" >> $Env:GITHUB_OUTPUT
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
  
  updateSML:
    runs-on: [self-hosted, project-updater]
    needs: check
    if: needs.check.outputs.shouldRun == 'true'
    steps:
      - name: Validate branch name
        if: inputs.branch != 'EarlyAccess' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
            
      - name: Download jq
        run: gh release download --repo stedolan/jq -p "jq-win64.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        
      - name: Download Satisfactory EarlyAccess
        if: inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --no-https --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --no-https --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y

      - name: Checkout SML
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/auto-header-update'
          path: 'SML'
          repository: 'satisfactorymodding/SatisfactoryModLoader'
          token: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Checkout UnrealProjectGenerator
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'sfm'
          repository: 'satisfactorymodding/UnrealProjectGenerator'
      
      - name: Checkout satisfactory-modding-actions
        uses: actions/checkout@v3
        with:
          path: 'satisfactory-modding-actions'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      
      - name: Setup Unreal Engine
        uses: mircearoata/satisfactory-modding-ue-action@master
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
        
      - name: Copy latest game source
        run: |
          Remove-Item SML\Source\FactoryGame -Recurse -Force -Confirm:$false -ErrorAction Ignore
          Remove-Item SML\Source\DummyHeaders -Recurse -Force -Confirm:$false -ErrorAction Ignore
          cp sfm\FactoryGame\Source\FactoryGame SML\Source -Recurse
          cp sfm\FactoryGame\Source\DummyHeaders SML\Source -Recurse
          echo ${{ needs.check.outputs.gameVersion }} | Out-File SML\Source\FactoryGame\currentVersion.txt -Encoding utf8
          
      - name: Add Wwise
        run: |
          gh release download --repo mircearoata/wwise-cli -p "wwise-cli.exe"
          ./wwise-cli.exe download     --sdk-version "2022.1.5.8242"          --filter Packages=SDK --filter DeploymentPlatforms=Windows_vc140 --filter DeploymentPlatforms=Windows_vc150 --filter DeploymentPlatforms=Windows_vc160 --filter DeploymentPlatforms=Windows_vc170 --filter DeploymentPlatforms=Linux --filter DeploymentPlatforms=
          ./wwise-cli.exe integrate-ue --integration-version "2022.1.5.2714"  --project "SML\FactoryGame.uproject"
        env:
          WWISE_EMAIL: ${{ secrets.WWISE_EMAIL }}
          WWISE_PASSWORD: ${{ secrets.WWISE_PASSWORD }}
          
      - name: Checkout UEAssetToolkit
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/dev'
          path: 'UEAssetToolkit'
          repository: 'mircearoata/UEAssetToolkit'
          
      - name: Replace SML with hooks-only version
        run: |
          mv SML\Mods Mods_TEMP
          cp satisfactory-modding-actions\SML_HooksOnly SML\Mods -Recurse
          
      - name: Copy UEAssetToolkit to project
        run: |
          cp UEAssetToolkit\\AssetDumper SML\\Mods -Recurse
          cp UEAssetToolkit\\AssetGenerator SML\\Mods -Recurse
      
      - name: Compile project
        run: |
          & "$Env:UE_ROOT\\Engine\\Build\\BatchFiles\\Build.bat"  -projectfiles -project="$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" -game -rocket -progres
          MSBuild.exe .\\SML\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\SML\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
          
      - name: Set SML BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' SML\\Mods\\SML\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm SML\\Mods\\SML\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules SML\\Mods\\SML\\Binaries\\Win64
      
      - name: Set AssetDumper BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' SML\\Mods\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm SML\\Mods\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules SML\\Mods\\AssetDumper\\Binaries\\Win64
          
      - name: Copy SML to game
        run: cp SML\\Mods\\SML Satisfactory\\FactoryGame\\Mods\\SML -Recurse
          
      - name: Copy AssetDumper to game
        run: cp SML\\Mods\\AssetDumper Satisfactory\\FactoryGame\\Mods\\AssetDumper -Recurse
          
      - name: Run game and dump assets
        run: Start-Process .\\Satisfactory\\Engine\\Binaries\\Win64\\FactoryGame-Win64-Shipping.exe -ArgumentList "-EpicPortal -nullrhi -DumpAllGameAssets -RootAssetPath=/Game -ExcludePackagePaths=/Game/WwiseAudio -ExcludePackageNames=/Game/Geometry/Meshes/1M_Cube_Chamfer -PackagesPerTick=32 -ExitOnFinish" -NoNewWindow -Wait
      
      - name: Dump configs from pak file
        run: |
          & "$Env:UE_ROOT\\Engine\\Binaries\\Win64\\UnrealPak.exe" -Extract "$Env:GITHUB_WORKSPACE\\Satisfactory\\FactoryGame\\Content\\Paks\\FactoryGame-Windows.pak" "$Env:GITHUB_WORKSPACE\\SatisfactoryPak" -Filter="FactoryGame/Config/*.ini"
      
      - name: Update CollisionProfiles
        run: |
          $pakEngineIniPath = Resolve-Path -Path 'SatisfactoryPak\\FactoryGame\\Config\\DefaultEngine.ini'
          $projectEngineIniPath = Resolve-Path -Path 'SML\\Config\\DefaultEngine.ini'
          
          $options = [Text.RegularExpressions.RegexOptions]'Multiline,Singleline'
          $collisionProfilesRegex = '^\[\/Script\/Engine\.CollisionProfile\].+?$(?=\r?\n\[)'
          
          $pakEngineIni = Get-Content $pakEngineIniPath -Encoding UTF8 -Raw
          $projectEngineIni = Get-Content $projectEngineIniPath -Encoding UTF8 -Raw
          
          $newCollisionProfiles = [regex]::Match($pakEngineIni, $collisionProfilesRegex, $options)
          $newProjectEngineIni = [regex]::Replace($projectEngineIni, $collisionProfilesRegex, $newCollisionProfiles.Value, $options)
          
          # Out-File would use UTF8-BOM
          [System.IO.File]::WriteAllText($projectEngineIniPath, $newProjectEngineIni)
          
      - name: Restore SMLEditor utils folder
        run: |
          cp Mods_TEMP\SMLEditor\Content\Utils SML\Mods\SMLEditor\Content\Utils -Recurse
      
      - name: Run asset generator
        run: |
          & "$Env:UE_ROOT\\Engine\\Binaries\\Win64\\UnrealEditor-Cmd.exe" "$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" -run=AssetGenerator -DumpDirectory="$Env:GITHUB_WORKSPACE\\Satisfactory\\FactoryGame\\AssetDump" -ForceGeneratePackageNames="$Env:GITHUB_WORKSPACE\\satisfactory-modding-actions\\ForceGeneratePackages.txt" -SkipSavePackages="$Env:GITHUB_WORKSPACE\\satisfactory-modding-actions\\SkipSavePackages.txt" -PublicProject -stdout -unattended -NoLogTimes
      
      - name: Remove outdated assets
        run: |
          & "$Env:UE_ROOT\\Engine\\Binaries\\Win64\\UnrealPak.exe" -List -csv="$Env:GITHUB_WORKSPACE\\pakContents.csv" -LogCmds="LogPakFile Warning" $Env:GITHUB_WORKSPACE\\Satisfactory\\FactoryGame\\Content\\Paks\\FactoryGame-Windows.pak
          $pakData = Import-Csv .\pakContents.csv
          $pakFiles = $pakData | ForEach-Object { $_.Filename }
          $files = @()
          $prefix = "FactoryGame/Content/"
          foreach ($file in $pakFiles) {
              $filename = $file
              if ($filename.StartsWith($prefix)) {
                  $filename = $filename.Substring($prefix.length)
                  $files += ($Env:GITHUB_WORKSPACE + "\SML\Content\" + $filename).replace('/', '\')
              }
          }
          dir -rec SML\Content\*.* | Where-Object { $files -notcontains $_.Fullname } | Remove-Item
            
      - name: Revert handmade assets
        run: |
          $customAssets = Get-Content .\\satisfactory-modding-actions\\CustomAssets.txt 
          cd SML
          $customAssets | Foreach-Object { git checkout Content/$_ }
        
      - name: Undo "Replace SML with hooks-only version"
        run: |
          rm -r SML\Mods
          mv Mods_TEMP SML\Mods
        
      - name: Update SML GameVersion
        run: |
          $RawString = .\jq-win64.exe -r '.GameVersion = ""${{ needs.check.outputs.gameVersion }}""' --tab SML\\Mods\\SML\\SML.uplugin
          $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
          [System.IO.File]::WriteAllLines("SML.uplugin", $RawString, $Utf8NoBomEncoding)
          rm SML\\Mods\\SML\\SML.uplugin
          mv SML.uplugin SML\\Mods\\SML
      
      - name: Commit and push
        working-directory: SML
        run: |
          git rm -r --cached Source Content
          git add Source Content
          git add Config/DefaultEngine.ini
          git commit -m "Automated update to CL${{ needs.check.outputs.gameVersion }}"
          git push
          
      - name: Archive asset dump
        if: always()
        run: 7z a AssetDump.7z Satisfactory\FactoryGame\AssetDump
          
      - name: Store asset dump
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: AssetDump
          path: |
            AssetDump.7z
          retention-days: 7
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
