name: Check and update UnrealProjectGenerator

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The game branch (Stable/Experimental)'
        required: true
        type: string
  workflow_call:
    inputs:
      branch:
        description: 'The game branch (Stable/Experimental)'
        required: true
        type: string
    secrets:
      WWISE_EMAIL:
        required: true
      WWISE_PASSWORD:
        required: true
      ACCESS_TOKEN:
        required: false

jobs:
  check:
    runs-on: [self-hosted, project-updater]
    outputs:
     shouldRun: ${{ steps.setShouldRun.outputs.shouldRun }}
     gameVersion: ${{ steps.setGameVersion.outputs.gameVersion }}
    steps:
      - name: Validate branch name
        if: inputs.branch != 'Stable' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Download Satisfactory Stable version file
        if: inputs.branch == 'Stable'
        run: .\legendary.exe download CrabEA --no-https --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental version file
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --no-https --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y

      - name: Read Satisfactory version
        id: gameVersion
        uses: notiz-dev/github-action-json-property@release
        with: 
            path: 'Satisfactory/Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version'
            prop_path: 'Changelist'

      - uses: actions/checkout@v3
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'sfm'
          repository: 'satisfactorymodding/UnrealProjectGenerator'

      - name: Read current repo version
        id: currentHeadersVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'sfm/Headers/currentVersion.txt'
      
      - name: Set gameVersion
        id: setGameVersion
        run: echo "gameVersion=${{ steps.gameVersion.outputs.prop }}" >> $Env:GITHUB_OUTPUT
      
      - name: Set shouldRun
        id: setShouldRun
        run: echo "shouldRun=${{ steps.gameVersion.outputs.prop > steps.currentHeadersVersion.outputs.content }}" >> $Env:GITHUB_OUTPUT
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
     
  updateHeaders:
    runs-on: [self-hosted, project-updater]
    needs: check
    if: needs.check.outputs.shouldRun == 'true'
    steps:
      - name: Validate branch name
        if: inputs.branch != 'Stable' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Download jq
        run: gh release download --repo stedolan/jq -p "jq-win64.exe"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Download Satisfactory Stable
        if: inputs.branch == 'Stable'
        run: .\legendary.exe download CrabEA --no-https --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --no-https --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y

      - name: Checkout satisfactory-modding
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'sfm'
          repository: 'satisfactorymodding/UnrealProjectGenerator'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      
      - name: Setup Unreal Engine
        uses: mircearoata/satisfactory-modding-ue-action@master
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
        
      - name: Add Wwise
        run: |
          gh release download --repo mircearoata/wwise-cli -p "wwise-cli.exe"
          ./wwise-cli.exe download     --sdk-version "2022.1.5.8242"          --filter Packages=SDK --filter DeploymentPlatforms=Windows_vc140 --filter DeploymentPlatforms=Windows_vc150 --filter DeploymentPlatforms=Windows_vc160 --filter DeploymentPlatforms=Windows_vc170 --filter DeploymentPlatforms=Linux --filter DeploymentPlatforms=
          ./wwise-cli.exe integrate-ue --integration-version "2022.1.5.2714"  --project "sfm\FactoryGame\FactoryGame.uproject"
        env:
          WWISE_EMAIL: ${{ secrets.WWISE_EMAIL }}
          WWISE_PASSWORD: ${{ secrets.WWISE_PASSWORD }}
          
      - name: Checkout UEAssetToolkit
        uses: actions/checkout@v3
        with:
          ref: 'refs/heads/dev'
          path: 'UEAssetToolkit'
          repository: 'mircearoata/UEAssetToolkit'
          
      - name: Copy AssetDumper to project
        run: |
          mkdir sfm\\FactoryGame\\Mods
          cp UEAssetToolkit\\AssetDumper sfm\\FactoryGame\\Mods -Recurse
      
      - name: Compile AssetDumper (project without sources)
        run: |
          Remove-Item .\\sfm\\FactoryGame\\Source\\FactoryGame\\Public -Recurse -Force -Confirm:$false -ErrorAction Ignore
          Remove-Item .\\sfm\\FactoryGame\\Source\\FactoryGame\\Private -Recurse -Force -Confirm:$false -ErrorAction Ignore
          & "$Env:UE_ROOT\\Engine\\Build\\BatchFiles\\Build.bat"  -projectfiles -project="$Env:GITHUB_WORKSPACE\\sfm\\FactoryGame\\FactoryGame.uproject" -game -rocket -progres
          MSBuild.exe .\\sfm\\FactoryGame\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\sfm\\FactoryGame\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
          
      - name: Set AssetDumper BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' sfm\\FactoryGame\\Mods\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm sfm\\FactoryGame\\Mods\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules sfm\\FactoryGame\\Mods\\AssetDumper\\Binaries\\Win64
          
      - name: Copy AssetDumper to game
        run: cp sfm\\FactoryGame\\Mods\\AssetDumper Satisfactory\\FactoryGame\\Mods -Recurse
          
      - name: Run game and dump native classes
        run: Start-Process .\\Satisfactory\\Engine\\Binaries\\Win64\\FactoryGame-Win64-Shipping.exe -ArgumentList "-EpicPortal -nullrhi -DumpNativeClasses" -NoNewWindow -Wait
          
      - name: Extract headers
        working-directory: Satisfactory/CommunityResources
        run: 7z x Headers.zip -oHeaders
      
      - name: Compile tools
        working-directory: sfm/GenerationScripts
        run: |
          MSBuild.exe FixHeaders\\FixHeaders.sln
          MSBuild.exe ImplementHeaders\\ImplementHeaders.sln
          
      - name: Update headers and dummy implementations
        run: py sfm\\GenerationScripts\\generateCode.py --headers "Satisfactory\\CommunityResources\\Headers" --version "${{ needs.check.outputs.gameVersion }}" --uepath="$Env:UE_ROOT"
        
      - name: Run defaults generator
        run: py sfm\\GenerationScripts\\defaultValues.py --dump "Satisfactory\\FactoryGame\\NativeClassDump"
      
      - name: Compile updated project
        run: |
          MSBuild.exe .\\sfm\\FactoryGame\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\sfm\\FactoryGame\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
      
      - name: Commit and push
        working-directory: sfm
        run: |
          git rm -r --cached *
          git add .
          git commit -m "Automated update to CL${{ needs.check.outputs.gameVersion }}"
          git push
          
      - name: Archive native class dump
        if: always()
        run: 7z a NativeClassDump.7z Satisfactory\FactoryGame\NativeClassDump
          
      - name: Store native class dump
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: NativeClassDump
          path: |
            NativeClassDump.7z
          retention-days: 7
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
